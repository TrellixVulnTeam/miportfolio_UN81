{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nexport let AutenticacionService = /*#__PURE__*/(() => {\n  class AutenticacionService {\n    //apiUrl = 'http://localhost:8080';\n    constructor(http, router, _location) {\n      this.http = http;\n      this.router = router;\n      this._location = _location;\n      this.times = 10600;\n      this.today = new Date();\n      this.num = 20;\n      this.timdm = 0;\n      this.tt = new Date();\n      this.conta = 0;\n      this.pepito = false;\n      this.apiUrl = 'https://porfoarp.herokuapp.com';\n    }\n\n    login(user, password) {\n      if (user === \"\" && password === \"\") {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Tiene que iniciar seción!!',\n          footer: ''\n        });\n        return;\n      }\n\n      const headers = {\n        'content-type': 'application/x-www-form-urlencoded'\n      }; // const headers = { 'content-type': 'application/json'};\n\n      const body = {\n        head: new HttpParams().set('user', user).set('password', password)\n      };\n      const params = new URLSearchParams();\n      params.set('user', user);\n      params.set('password', password); // const options = new RequestOptions({\n      //   headers: this.getAuthorizedHeaders(),\n      //   responseType: ResponseContentType.Json,\n      //   params: params,\n      //   withCredentials: false\n      // });\n\n      this.http.post(this.apiUrl + '/user', params, {\n        headers\n      }).subscribe(resp => {\n        //this.clinT();\n        //this.sesionEsp();\n        this.limite = 0;\n        localStorage.setItem('auth_token', resp.token);\n        localStorage.setItem('usr', user);\n        localStorage.removeItem('id');\n        var titon = new Date();\n        localStorage.setItem('data', titon.getMinutes().toString());\n        localStorage.setItem('timeps', '28');\n        localStorage.setItem('passw', password);\n\n        if (resp.token !== null) {\n          this.secc();\n          this.router.navigate(['/PortFolio']);\n        } else {\n          this.logout();\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: 'usuario o contraseña invalido!',\n            footer: 'Registrarse!'\n          });\n        }\n      });\n    }\n\n    secc() {\n      this.cl = setInterval(() => {\n        var fifi = new Date();\n        fifi.getMinutes(); //console.log(\"este es fifi \"+\" \"+fifi);\n\n        this.limite = 0;\n        this.limite = fifi.getMinutes() - parseInt(localStorage.getItem('data')); // if(this.limite !== parseInt(localStorage.getItem('tip')!) ){\n        //   localStorage.setItem('tip',this.limite?.toString());\n        //   let t=parseInt(localStorage.getItem('timeps')!)-parseInt(localStorage.getItem('tip')!);\n        // localStorage.setItem('timeps',t.toString());\n        // }\n        //console.log(\"este es Limite\"+\" \"+ this.limite)\n\n        if (this.limite >= parseInt(localStorage.getItem('timeps'))) {\n          if (this.conta === 0) {\n            clearInterval(this.cl);\n            this.conta = 2;\n            localStorage.removeItem('tip');\n            localStorage.setItem('timeps', '29');\n            this.secc();\n            this.tiempos();\n          } else {\n            if (this.conta === 2) {\n              this.logout();\n            }\n\n            if (this.conta === 1) {\n              this.logout();\n            }\n          } //this.logout();\n\n        }\n      }, 1000);\n    }\n\n    sesionEsp() {\n      setTimeout(() => {\n        this.tiempos();\n      }, 500000);\n    }\n\n    cerrSesi() {\n      setTimeout(() => {\n        this.logout();\n      }, 90000);\n    }\n\n    refresh() {\n      this.router.navigateByUrl(\"/refresh\", {\n        skipLocationChange: true\n      }).then(() => {\n        console.log(decodeURI(this._location.path()));\n        this.router.navigate([decodeURI(this._location.path())]);\n      });\n    }\n\n    clinT() {\n      this.cl = setInterval(() => {\n        if (this.times === parseInt(localStorage.getItem('time'))) {\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        } else {\n          this.times = parseInt(localStorage.getItem('time'));\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        } // console.log(\"este es el tiempo \"+ \" \"+ localStorage.getItem('time') );\n\n\n        if (localStorage.getItem('timedm') !== '') {\n          this.timdm = parseInt(localStorage.getItem('timedm'));\n          this.timdm -= 1;\n          localStorage.setItem('timedm', this.timdm.toString());\n\n          if (parseInt(localStorage.getItem('timedm')) === 10003) {\n            clearInterval(this.cl);\n            this.logout();\n          }\n        }\n\n        if (parseInt(localStorage.getItem('time')) < 10000) {\n          clearInterval(this.cl);\n          this.tiempos();\n        } // setTimeout(() => {\n        //   this.tiempos();\n        // },600000)\n\n      }, 1000);\n    }\n\n    clinT2() {\n      this.cl2 = setInterval(() => {\n        if (this.times === parseInt(localStorage.getItem('time'))) {\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        } else {\n          this.times = parseInt(localStorage.getItem('time'));\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        } // console.log(\"este es el tiempo \"+ \" \"+ localStorage.getItem('time') );\n\n\n        if (localStorage.getItem('timedm') !== '') {\n          this.timdm = parseInt(localStorage.getItem('timedm'));\n          this.timdm -= 1;\n          localStorage.setItem('timedm', this.timdm.toString());\n\n          if (parseInt(localStorage.getItem('timedm')) === 9890) {\n            this.logout();\n          }\n        } // setTimeout(() => {\n        //   this.tiempos();\n        // },600000)\n\n      }, 1000);\n    }\n\n    tiempos() {\n      Swal.fire({\n        title: 'Extender secion',\n        text: \"La secion esta por caducar,¿desea extenderla?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, extender!'\n      }).then(result => {\n        //localStorage.setItem('timedm','10100');\n        //this.clinT2();\n        if (result.isConfirmed) {\n          clearInterval(this.cl);\n          this.limite = 0;\n          localStorage.removeItem('data');\n          this.secc;\n          this.login(localStorage.getItem('usr'), localStorage.getItem('passw'));\n        } else {\n          clearInterval(this.cl);\n          this.conta = 1;\n          localStorage.setItem('timeps', '29');\n          this.secc(); // localStorage.setItem('time','10100');\n          // //localStorage.setItem('timedm','9999');\n          // this.clinT();\n        }\n      });\n    }\n\n    logout() {\n      clearInterval(this.cl);\n      this.conta = 0;\n      this.limite = 0;\n      localStorage.removeItem('data');\n      localStorage.removeItem('timedm');\n      localStorage.removeItem('time');\n      localStorage.removeItem('usr');\n      localStorage.removeItem('passw');\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('tip');\n      localStorage.removeItem('timeps');\n      this.router.navigate(['']);\n    }\n\n    get logIn() {\n      return localStorage.getItem('auth_token') !== null;\n    }\n\n    getTasks() {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        }) //,\n        //    head: new HttpParams()\n        //    .set('Content-Type', 'application/json')\n\n      };\n      /*const tasks =of(TASKS);\r\n      return tasks;*/\n\n      return this.http.get(this.apiUrl + '/personas/traer', httpOptions);\n    }\n\n    deleteTask(task) {\n      const url = `${this.apiUrl}/${task.id}`;\n      return this.http.delete(url);\n    }\n\n    updateTaskReminder(task) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        }) //,\n        //    head: new HttpParams()\n        //    .set('Content-Type', 'application/json')\n\n      };\n      const url = `${this.apiUrl}/${task.id}`;\n      return this.http.put(url, task, httpOptions);\n    }\n\n    updateTask(task) {\n      const option = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      const body = {\n        title: 'Angular POST Request Example'\n      };\n      const url = `${this.apiUrl}/personas/editar/${task.id}`;\n      return this.http.put(url + '?acerca_de=' + task.acerca_de + '&nombre=' + task.nombre + '&apellido=' + task.apellido + '&domicilio=' + task.domicilio + '&fechanac=' + task.fechanac + '&telefono=' + task.telefono + '&correo=' + task.correo + '&sobre_mi=' + task.sobre_mi + '&url_foto=' + task.url_foto + '&facebook=' + task.facebook + '&twiter=' + task.twiter + '&instagram=' + task.instagram + '&infcont=' + task.infcont, body, option);\n    }\n\n    addTask(task) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        }) //,\n        //    head: new HttpParams()\n        //    .set('Content-Type', 'application/json')\n\n      };\n      return this.http.post(this.apiUrl, task, httpOptions);\n    }\n\n    addTaskReg(reg) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        }) //,\n        //    head: new HttpParams()\n        //    .set('Content-Type', 'application/json')\n\n      };\n      return this.http.post(this.apiUrl + '/user/crear', reg);\n    }\n\n  }\n\n  AutenticacionService.ɵfac = function AutenticacionService_Factory(t) {\n    return new (t || AutenticacionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location));\n  };\n\n  AutenticacionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AutenticacionService,\n    factory: AutenticacionService.ɵfac,\n    providedIn: 'root'\n  });\n  return AutenticacionService;\n})();","map":null,"metadata":{},"sourceType":"module"}
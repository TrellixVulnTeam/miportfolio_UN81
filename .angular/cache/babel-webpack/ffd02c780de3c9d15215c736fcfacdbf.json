{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@auth0/angular-jwt\";\nexport let AutenticacionService = /*#__PURE__*/(() => {\n  class AutenticacionService {\n    //apiUrl = 'http://localhost:8080';\n    constructor(http, router, _location, jwtHelper) {\n      this.http = http;\n      this.router = router;\n      this._location = _location;\n      this.jwtHelper = jwtHelper;\n      this.user = \"\";\n      this.password = \"\";\n      this.token = \"\";\n      this.conec = 0;\n      this.auten = 1;\n      this.timelim = 0;\n      this.times = 10600;\n      this.today = new Date();\n      this.num = 20;\n      this.timdm = 0;\n      this.showdanger = false;\n      this.showsucces = false;\n      this.tt = new Date();\n      this.conta = 0;\n      this.pepito = false;\n      this.apiUrl = 'https://porfoarp.herokuapp.com';\n    }\n\n    login(user, password) {\n      if (user === \"\" && password === \"\") {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Tiene que iniciar seción!!',\n          footer: ''\n        });\n        return;\n      }\n\n      const headers = {\n        'content-type': 'application/x-www-form-urlencoded'\n      };\n      const body = {\n        head: new HttpParams().set('user', user).set('password', password)\n      };\n      const params = new URLSearchParams();\n      params.set('user', user);\n      params.set('password', password);\n      this.http.post(this.apiUrl + '/user', params, {\n        headers\n      }).subscribe(resp => {\n        this.id = resp.id;\n        localStorage.setItem('conec', resp.conec);\n        localStorage.removeItem('id');\n        this.rol = resp.rol;\n        localStorage.setItem('usr', user);\n        localStorage.setItem('ids', resp.id);\n        var titon = new Date();\n        localStorage.setItem('data', titon.getMinutes().toString());\n        localStorage.setItem('timeps', '28');\n        localStorage.setItem('passw', password);\n\n        if (resp.token !== \"nada\") {\n          localStorage.setItem('auth_token', resp.token);\n          this.auten = 1;\n          localStorage.removeItem('conta');\n          this.router.navigate(['/PortFolio']);\n        } else {\n          this.numb = parseInt(localStorage.getItem('conec'));\n\n          if (this.numb === 1) {\n            localStorage.setItem('conta', '4');\n            Swal.fire({\n              icon: 'error',\n              title: 'Oops...',\n              text: 'Ese Usuario esta Conectado!',\n              footer: 'User On!'\n            });\n          } else {\n            if (resp.auten >= 3) {\n              this.auten = 3;\n              localStorage.setItem(\"conta\", '4');\n              this.logout();\n              Swal.fire({\n                icon: 'error',\n                title: 'Oops...',\n                text: 'contraseña invalida!',\n                footer: 'Error!'\n              });\n            } else {\n              if (localStorage.getItem('conta') === null) {\n                this.router.navigate(['/Inic']);\n                this.auten = 1;\n                localStorage.setItem(\"conta\", '1');\n                this.valiD();\n              } else {\n                if (localStorage.getItem('conta') === '1') {\n                  this.auten = 2;\n                  localStorage.setItem(\"conta\", '2');\n                  this.valiD();\n                } else {\n                  if (localStorage.getItem('conta') === '2') {\n                    this.auten = 3;\n                    localStorage.setItem(\"conta\", '3');\n                    this.valiD();\n                  } else {\n                    if (localStorage.getItem('conta') === '3') {\n                      this.auten = 3;\n                      localStorage.setItem(\"conta\", '4');\n                      this.valiD();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n\n    valiD() {\n      this.logout();\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'usuario o contraseña invalido!',\n        footer: 'Registrarse!'\n      });\n    }\n\n    tokenVal() {\n      if (this.jwtHelper.isTokenExpired(localStorage.getItem('auth_token'))) {\n        clearInterval(this.inter);\n        this.sesionEsp();\n        this.conec = 0;\n        this.updat();\n        this.tiempos();\n      }\n    }\n\n    sesionEspi() {\n      this.inter = setInterval(() => {\n        this.tokenVal();\n      }, 10000);\n    }\n\n    sesionEsp() {\n      this.tim = setTimeout(() => {\n        this.logout();\n      }, 60000);\n    }\n\n    cerrSesi() {\n      setTimeout(() => {\n        this.logout();\n      }, 90000);\n    }\n\n    clinT() {\n      this.cl = setInterval(() => {\n        if (this.times === parseInt(localStorage.getItem('time'))) {\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        } else {\n          this.times = parseInt(localStorage.getItem('time'));\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        }\n\n        if (localStorage.getItem('timedm') !== '') {\n          this.timdm = parseInt(localStorage.getItem('timedm'));\n          this.timdm -= 1;\n          localStorage.setItem('timedm', this.timdm.toString());\n\n          if (parseInt(localStorage.getItem('timedm')) === 10003) {\n            clearInterval(this.cl);\n            this.logout();\n          }\n        }\n\n        if (parseInt(localStorage.getItem('time')) < 10000) {\n          clearInterval(this.cl);\n          this.tiempos();\n        }\n      }, 1000);\n    }\n\n    clinT2() {\n      this.cl2 = setInterval(() => {\n        if (this.times === parseInt(localStorage.getItem('time'))) {\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        } else {\n          this.times = parseInt(localStorage.getItem('time'));\n          this.times -= 1;\n          localStorage.setItem('time', this.times.toString());\n        }\n\n        if (localStorage.getItem('timedm') !== '') {\n          this.timdm = parseInt(localStorage.getItem('timedm'));\n          this.timdm -= 1;\n          localStorage.setItem('timedm', this.timdm.toString());\n\n          if (parseInt(localStorage.getItem('timedm')) === 9890) {\n            this.logout();\n          }\n        }\n      }, 1000);\n    }\n\n    tiempos() {\n      Swal.fire({\n        title: 'Extender secion',\n        text: \"La seción caduco,¿desea extenderla?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, extender!'\n      }).then(result => {\n        if (result.isConfirmed) {\n          clearTimeout(this.tim);\n\n          if (localStorage.getItem('usr') !== null) {\n            this.conec = 0;\n            this.updat();\n            this.login(localStorage.getItem('usr'), localStorage.getItem('passw'));\n            return;\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Oops...',\n              text: 'Caduco La Secion!',\n              footer: 'Ingresa nuevamente!'\n            });\n            return;\n          }\n        }\n\n        clearTimeout(this.tim);\n        this.conec = 0;\n        this.logout();\n      });\n    }\n\n    updat() {\n      if (localStorage.getItem('usr') !== null) {\n        if (this.id !== null) {\n          this.id = parseInt(localStorage.getItem('ids'));\n          this.user = localStorage.getItem('usr').toString();\n          this.password = localStorage.getItem('passw').toString();\n          this.token = \"\";\n          this.expired = 0;\n          this.conec;\n          this.auten;\n          this.timelim = 0;\n          this.getTasksUsr().subscribe(resp => {\n            this.rol = resp.rol;\n          });\n          const {\n            id,\n            user,\n            password,\n            token,\n            expired,\n            conec,\n            auten,\n            timelim,\n            rol\n          } = this;\n          const ModiFi = {\n            id,\n            user,\n            password,\n            token,\n            expired,\n            conec,\n            auten,\n            timelim,\n            rol\n          };\n          this.updateTaskUsr(ModiFi).subscribe(data => {}, error => {\n            alert(\"Se descuageringo todo\" + JSON.stringify(error));\n          });\n        }\n      }\n    }\n\n    logout() {\n      this.updat();\n      clearInterval(this.cl);\n      this.conta = 0;\n      this.limite = 0;\n      localStorage.removeItem('data');\n      localStorage.removeItem('timedm');\n      localStorage.removeItem('time');\n      localStorage.removeItem('usr');\n      localStorage.removeItem('passw');\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('tip');\n      localStorage.removeItem('ids');\n      localStorage.removeItem('timeps');\n      this.router.navigate(['']);\n    }\n\n    get logIn() {\n      return localStorage.getItem('auth_token') !== null;\n    }\n\n    getTasks() {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      return this.http.get(this.apiUrl + '/personas/traer', httpOptions);\n    }\n\n    getTasksUsr() {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      const body = {\n        title: 'Angular POST Request Example'\n      };\n      const url = `${this.apiUrl}/user/traer/${localStorage.getItem('usr')}`;\n      return this.http.put(url, body, httpOptions);\n    }\n\n    deleteTask(task) {\n      const url = `${this.apiUrl}/${task.id}`;\n      return this.http.delete(url);\n    }\n\n    updateTaskReminder(task) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      const url = `${this.apiUrl}/${task.id}`;\n      return this.http.put(url, task, httpOptions);\n    }\n\n    updateTask(task) {\n      const option = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      const body = {\n        title: 'Angular POST Request Example'\n      };\n      const url = `${this.apiUrl}/personas/editar/${task.id}`;\n      return this.http.put(url + '?acerca_de=' + task.acerca_de + '&nombre=' + task.nombre + '&apellido=' + task.apellido + '&domicilio=' + task.domicilio + '&fechanac=' + task.fechanac + '&telefono=' + task.telefono + '&correo=' + task.correo + '&sobre_mi=' + task.sobre_mi + '&url_foto=' + task.url_foto + '&facebook=' + task.facebook + '&twiter=' + task.twiter + '&instagram=' + task.instagram + '&infcont=' + task.infcont, body, option);\n    }\n\n    updateTaskUsr(task) {\n      const option = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      const body = {\n        title: 'Angular POST Request Example'\n      };\n      const url = `${this.apiUrl}/user/editar/${task.id}`;\n      return this.http.put(url + '?user=' + task.user + '&password=' + task.password + '&token=' + task.token + '&expired=' + task.expired + '&conec=' + task.conec + '&auten=' + task.auten + '&timelim=' + task.timelim.toString() + '&rol=' + task.rol, body);\n    }\n\n    addTask(task) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      return this.http.post(this.apiUrl, task, httpOptions);\n    }\n\n    addTaskReg(reg) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': localStorage.getItem('auth_token')\n        })\n      };\n      return this.http.post(this.apiUrl + '/user/crear', reg);\n    }\n\n    addmiSwet() {\n      Swal.fire('Buen Trabajo!', 'Te Registraste!', 'success');\n    }\n\n    addmiSwetER() {\n      Swal.fire('Sorry!', 'Ese email ya se encuentra Registrado!', 'error');\n    }\n\n    addmiSwetTasm() {\n      Swal.fire('Muy Bien!', 'Se Modifico Correctamente!', 'success');\n    }\n\n    addmiSwetTasadd() {\n      Swal.fire('Muy Bien!', 'Se Agrego Correctamente!', 'success');\n    }\n\n    addmiSwetTasbor() {\n      Swal.fire('Muy Bien!', 'Se borro Correctamente!', 'success');\n    }\n\n    addmiSwetERadd() {\n      Swal.fire('Info!', 'No tiene que dejar campos en 0 !', 'error');\n    }\n\n    addRol() {\n      Swal.fire('Aviso!', 'Solo El Administrador Puede Realizar Cambios!', 'warning');\n    }\n\n  }\n\n  AutenticacionService.ɵfac = function AutenticacionService_Factory(t) {\n    return new (t || AutenticacionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location), i0.ɵɵinject(i4.JwtHelperService));\n  };\n\n  AutenticacionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AutenticacionService,\n    factory: AutenticacionService.ɵfac,\n    providedIn: 'root'\n  });\n  return AutenticacionService;\n})();","map":null,"metadata":{},"sourceType":"module"}